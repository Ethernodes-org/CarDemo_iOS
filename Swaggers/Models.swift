// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case Error(Int, Data?, Error)
}

open class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as AnyObject }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> [T] {
          print(type(of: source))
        
        print("decode array")
    
          //  print(source)
        let array = [source]
            return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
         print("decode dict")
        print(source)
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.int32Value as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.int64Value as! T;
        }
        if T.self is UUID.Type && source is String {
            return UUID(uuidString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is Data.Type && source is String {
            return Data(base64Encoded: source as! String) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject) -> Date in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return date
                    }
                }
            }
            if let sourceInt = source as? Int {
                // treat as a java date
                return Date(timeIntervalSince1970: Double(sourceInt / 1000) )
            }
            fatalError("formatter failed to parse \(source)")
        } 

        // Decoder for [SIMBAData]
        
        Decoders.addDecoder(clazz: [GetRegModel].self) { (source: AnyObject) -> [GetRegModel] in
            print("[GetRegModelDecoder]")
           
            return Decoders.decode(clazz: [GetRegModel].self, source: source)
        }
        
        // Decoder for SIMBAData
        Decoders.addDecoder(clazz: GetRegModel.self) { (source: AnyObject) -> GetRegModel in
             print("GetRegModelDecoder")
            
            let sourceDictionary = source as! [AnyHashable: Any]
          print(sourceDictionary)
            let instance = GetRegModel()
            //-------------------------------------------------------
            //--this is where the items are grabed from the backend--
            //-------------------------------------------------------
            
            //var results : [String : Any] = Decoders.decode(clazz: [String : Any].self, source: sourceDictionary["results"] as AnyObject)
             print("1")
            var results : [AnyObject] = Decoders.decode(clazz: [AnyObject].self, source: sourceDictionary["results"] as AnyObject)
            var resultsDict = results.first
            
            print("resultsDict")
             print(type(of: resultsDict))
            print(resultsDict)
           
            print("2")
           // var payload : [String : Any] = Decoders.decode(clazz: [String : Any].self, source: resultsDict["payload"] as AnyObject)
            var payload = resultsDict!["payload"]
            
            print("3")
        //    var inputs = payload["inputs"]
            print("4")
      //      var raw : [String : Any] = Decoders.decode(clazz: [String : Any].self, source: sourceDictionary["raw"] as AnyObject)
            print("5")
            //    instance.count = Decoders.decode(clazz: String.self, source: (sourceDictionary["count"] as AnyObject?)!)
            print("6")
           //     instance.next = Decoders.decode(clazz: String.self, source: (sourceDictionary["next"] as AnyObject?)!)
            print("7")
          //     instance.previous = Decoders.decode(clazz: String.self, source: (sourceDictionary["previous"] as AnyObject?)!)
            print("8")
          //      instance.results = results as [String : AnyObject]
            instance.results = resultsDict as? [AnyObject]
            print(resultsDict! as! [String:AnyObject])
            instance.id = (resultsDict?["id"] as! String)
            print(instance.id)
            /*    instance.parent = results["parent"] as? String
                instance.method = results["method"] as? String
                instance.payload = results["payload"] as? [String : AnyObject]
                instance.receipt = results["receipt"] as? String
                instance.timestamp = results["timestamp"] as? String
                instance.application = results["application"] as? String
                instance.organisation = results["organisation"] as? String
                instance.group = results["group"] as? String
                instance.member = results["member"] as? String
                instance.user = results["user"] as? String
                instance.transactionHash = results["transactionHash"] as? String
                instance.smart_contract = results["smart_contract"] as? String
                instance.adapter = results["adapter"] as? String
                instance.is_asset = results["is_asset"] as? String
                instance.bytes_stored_on_blockchain = results["bytes_stored_on_blockchain"] as? String
                instance.bundle = results["bundle"] as? String
                instance.data_store = results["data_store"] as? String
                instance.bytes_stored_on_datastore = results["bytes_stored_on_datastore"] as? String
                instance.error = results["error"] as? String
                instance.status = results["status"] as? String */
            /*
                instance.inputs = payload["inputs"] as? [String : AnyObject]
                instance.raw = payload["raw"] as? [String : AnyObject]
                instance.payloadMethod = payload["method"] as? String
            
                instance.vin = inputs["vin"] as? String
                instance.car = inputs["car"] as? String
                instance._bundlehash = inputs["_bundlehash"] as? String
                instance.make = inputs["make"] as? String
                instance.model = inputs["model"] as? String
            
                instance.to = raw["to"] as? String
                instance.data = raw["data"] as? String
                instance.gasPrice = raw["gasPrice"] as? String
                instance.gas = raw["gas"] as? String
                instance.value = raw["value"] as? String
                instance.from = raw["from"] as? String
                instance.gasLimit = raw["gasLimit"] as? String
                instance.nonce = raw["nonce"] as? String*/
            
                print("GetRegModelDecoder")
            return instance
        }    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
